name: Production CI/CD Pipeline

on:
  push:
    branches:
      - main 

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]  # Specify Node.js versions

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup Node.js environment in the backend directory
      - name: Setup Node.js ${{ matrix.node-version }} for Backend
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json  # Explicitly point to backend lock file

      # Install dependencies and run tests in the backend directory
      - name: Install and Test Backend
        working-directory: backend
        env:
          MONGODB_URL: ${{ secrets.MONGODB_URL }}  # Use MongoDB secret
          JWT_SECRET: ${{ secrets.JWT_SECRET }}    # Use JWT secret
          CLIENT_URL: ${{ secrets.CLIENT_URL }}    # Use CLIENT_URL secret
          SLU_REUSE_SUPPORT_EMAIL: ${{ secrets.SLU_REUSE_SUPPORT_EMAIL }}  # Support email secret
          SLU_REUSE_SUPPORT_EMAIL_PASSWORD: ${{ secrets.SLU_REUSE_SUPPORT_EMAIL_PASSWORD }}  # Support email password
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GOOGLE_PRIVATE_KEY_ID: ${{ secrets.GOOGLE_PRIVATE_KEY_ID }}
          GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
          GOOGLE_CLIENT_CERT_URL: ${{ secrets.GOOGLE_CLIENT_CERT_URL }}
          PYTHON_SERVICE_URL: ${{ secrets.PYTHON_SERVICE_URL }}
          NODE_OPTIONS: --no-deprecation          # Suppress deprecation warnings globally
        run: |
          npm install
          npm test

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]  # Ensure consistency with backend

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup Node.js environment in the frontend directory
      - name: Setup Node.js ${{ matrix.node-version }} for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json  # Explicitly point to frontend lock file

      # Install dependencies and run tests in the frontend directory
      - name: Install and Test Frontend
        working-directory: frontend
        env:
          NODE_OPTIONS: --no-deprecation  # Suppress deprecation warnings globally
        run: |
          npm install
          npm test

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    needs:
      - test-backend
      - test-frontend  # Ensure tests pass before building and pushing

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Docker (Install Docker CLI)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      #  Install Docker Compose
      - name: Install Docker Compose
        run: |
          apt-get update && apt-get install -y docker-compose

      # Log in to Docker Hub (or other registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push frontend Docker image
      - name: Build and Push Docker Images with Docker Compose
        run: |
          # Build the images
          docker-compose -f docker-compose.yml build
          
          # Push the images to Docker Hub
          docker-compose -f docker-compose.yml push